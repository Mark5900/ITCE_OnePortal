@page "/SkoleData"

@using DataAccessLibrary
@rendermode InteractiveServer
@inject ISkoleData _db

<PageTitle>Skole data</PageTitle>

<form class="form-container d-flex justify-content-between align-items-center">
    <h1>Skole data oversigt</h1>
    <a href="/SkoleData/Create" class="btn btn-primary">Opret skole</a>
</form>

<input type="text" @bind-value="_searchString" placeholder="Søg..." @bind-value:event="oninput" />

@if (_schools is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Prefix</th>
                <th>Navn</th>
                <th>Tekniker gruppe</th>
                <th>CVR</th>
                <th>EAN</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var school in filteredSchools)
            {
                <tr>
                    <td>@school.SkolePrefix</td>
                    <td>@school.SkoleNavn</td>
                    <td>@school.TeknikerGruppe</td>
                    <td>@school.CVR</td>
                    <td>@school.EAN</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SkoleDataModel> _schools;
    private string _searchString = "";

    private List<SkoleDataModel> filteredSchools
    {
        get
        {
            if (string.IsNullOrWhiteSpace(_searchString))
            {
                return _schools;
            }

            List<SkoleDataModel> tmpList = _schools.Where(
                s => (s.SkoleNavn?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (s.SkolePrefix?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (s.TeknikerGruppe?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (s.CVR?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (s.EAN?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();

            List<SkoleDataModel> sortedList = tmpList.OrderBy(s => s.SkolePrefix).ToList();
            return sortedList;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _schools = await _db.GetSkoleData();
        _schools = _schools.OrderBy(s => s.SkolePrefix).ToList();
    }
}