@page "/Changes/{ChanID}"
@using DataAccessLibrary
@using OnePortal.Components.Pages.Change
@rendermode InteractiveServer
@inject ICM_Changes _dbChanges
@inject ILogger<ChangeById> _logger
@inject NavigationManager NavigationManager

<PageTitle>Change @ChanID</PageTitle>

<form class="form-container d-flex justify-content-between align-items-center">
    <h1>Change ID: @ChanID</h1>
    <button class="btn btn-primary" disabled="@(!_changeHasChanged)" @onclick="ButtonSaveClicked">Save</button>
</form>

<div class="content-container">
    <div class="left-side">
        @if (_change is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="caller">
                <Caller CallerPerson="@_change.Caller" OnCallerChanged="OnCallerChanged" />
            </div>
            <div class="details">
                <BriefDescription Text="@_change.BriefDescription" OnBriefDescriptionChanged="OnBriefDescriptionChanged" />

                <Categories SubCategory="@_change.SubCategory" OnCategoryChanged="OnCategoryChanged" />
            </div>

            <div class="planning">
                <StartImplementedTime StartTime="@_change.StartTime" 
                ImplementedTime="@_change.ImplementedTime" OnTimesChanged="OnPlanningTimesChanged" />
            </div>

            <div class="processing">
                <OperatorPicker OperatorObj="@_change.Operator" OnOperatorChanged="OnOperatorChanged" />

                <br />
                <Status CurrentStatus="@_change.Status" NeedApproval="@_change.NeedApproval"
                    ApprovedByApprover="@_change.ApprovedByApprover" OnStatusChanged="OnStatusChanged" />

                <br />
                <input type="checkbox" @bind="_change.NeedApproval" disabled /> Need approval
                <br />
                <input type="checkbox" @bind="_change.ApprovedByApprover" disabled /> Approved by approver
            </div>
        }
    </div>

    <div class="right-side">
        @if (_change is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="description">
                <Description RichText="@_change.Description" OnDescriptionChanged="OnDescriptionChanged" />
            </div>

            <div style="padding: 10px;">
                <Comment Object="@_newComment" OnCommentChanged="OnCommentAdded" />
            </div>
            

            @foreach (var comment in _change.Comments)
            {
                <div style="padding: 10px;">
                    <Comment Object="@comment" OnCommentChanged="OnCommentChanged" />
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public string ChanID { get; set; }
    private int ChanIDInt => int.TryParse(ChanID, out var chanId) ? chanId : -1;
    private ChangeModel _change;
    private bool _changeHasChanged = false;
    private bool _addNewComment = false;
    private CommentModel _newComment = new CommentModel();
    protected override async Task OnInitializedAsync()
    {
         _logger.LogInformation($"ChangeById with ID {ChanIDInt} was initialized");

        if (ChanIDInt == 0){
            _change = new ChangeModel();
            _change.Status = "Oprettet";
        } else {
            _change = await _dbChanges.GetChange(ChanIDInt);
        }
    }

    private async void ButtonSaveClicked()
    {
        if (_addNewComment)
        {
            _change.Comments.Add(_newComment);
            _addNewComment = false;
        }

        if (ChanIDInt == 0){
            int newID = await _dbChanges.CreateChangeAndGetID(_change);
            _logger.LogInformation($"Change with ID {newID} was created");
            NavigationManager.NavigateTo($"/Changes/{newID}", true);
        }

        await _dbChanges.UpdateChange(_change);
        _changeHasChanged = false;
        _logger.LogInformation($"Change with ID {_change.ChanID} was updated");

        // Refresh page to get the updated data
        _change = await _dbChanges.GetChange(ChanIDInt);
    }

    private void OnPlanningTimesChanged((DateTime StartTime, DateTime ImplementedTime) times)
    {
        _change.StartTime = times.StartTime;
        _change.ImplementedTime = times.ImplementedTime;
        ValidateChange();
    }
    private void OnCallerChanged(CallerModel caller)
    {
        _change.Caller = caller;
        ValidateChange();
    }
    private void OnCategoryChanged(SubCategoryModel subCategory)
    {
        _change.SubCategory = subCategory;
        ValidateChange();
    }
    private void OnOperatorChanged(OperatorModel operatorObj)
    {
        _change.Operator = operatorObj;
        ValidateChange();
    }
    private void OnStatusChanged(string status)
    {
        if (status == "Godkendt")
        {
            _change.ApprovedByApprover = true;
        }

        _change.Status = status;
        ValidateChange();
    }
    private void OnBriefDescriptionChanged(string briefDescription)
    {
        _change.BriefDescription = briefDescription;
        ValidateChange();
    }
    private void OnDescriptionChanged(string description)
    {
        _change.Description = description;
        ValidateChange();
    }
    private void OnCommentChanged(CommentModel comment)
    {
        _change.Comments = _change.Comments.Where(c => c.ComID != comment.ComID).ToList();
        _change.Comments.Add(comment);
        ValidateChange();
    }
    private void OnCommentAdded(CommentModel comment)
    {
        if (string.IsNullOrWhiteSpace(comment.Comment))
            return;

        if (string.IsNullOrWhiteSpace(comment.Operator?.UPN))
            return;

        _newComment = comment;
        ValidateChange();
        _addNewComment = true;
    }
    private void ValidateChange()
    {
        // Validate that the change has the minimum required data

        if (string.IsNullOrWhiteSpace(_change.BriefDescription))
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(_change.Description))
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(_change.Caller?.UPN))
        {
            return;
        }
        if (string.IsNullOrWhiteSpace(_change.Caller?.Email))
        {
            return;
        }
        
        _changeHasChanged = true;
    }
}

<style>
    .content-container {
        display: flex;
        flex-direction: row;
    }

    .left-side {
        flex: 1;
    }

    .right-side {
        flex: 2;
    }

    .caller {
        border-bottom: 1px solid lightgray;
        padding: 10px;
    }

    .details {
        border-bottom: 1px solid lightgray;
        padding: 10px;
    }

    .planning {
        border-bottom: 1px solid lightgray;
        padding: 10px;
    }

    .processing {
        padding: 10px;
    }

    label {
        display: block;
        margin-bottom: 1px;
        margin-top: 10px;
    }

    .description {
        padding: 10px;
        border-bottom: 1px solid lightgray;
    }
</style>