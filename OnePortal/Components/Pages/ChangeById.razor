@page "/Changes/{ChanID}"
@using DataAccessLibrary
@using OnePortal.Components.Pages.Change
@rendermode InteractiveServer
@inject ICM_Changes _dbChanges
@inject ILogger<ChangeById> _logger

<form class="form-container d-flex justify-content-between align-items-center">
    <h1>Change ID: @ChanID</h1>
    <button class="btn btn-primary" disabled="@(!_changeHasChanged)" @onclick="ButtonSaveClicked">Save</button>
</form>

<div class="content-container">
    <div class="left-side">
        @if (_change is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="caller">
                <Caller CallerPerson="@_change.Caller" OnCallerChanged="OnCallerChanged" />
            </div>
            <div class="details">
                <BriefDescription Text="@_change.BriefDescription" OnBriefDescriptionChanged="OnBriefDescriptionChanged" />

                <Categories SubCategory="@_change.SubCategory" OnCategoryChanged="OnCategoryChanged" />
            </div>

            <div class="planning">
                <StartImplementedTime StartTime="@_change.StartTime" 
                ImplementedTime="@_change.ImplementedTime" OnTimesChanged="OnPlanningTimesChanged" />
            </div>

            <div class="processing">
                <OperatorPicker OperatorObj="@_change.Operator" OnOperatorChanged="OnOperatorChanged" />

                <br />
                <Status CurrentStatus="@_change.Status" NeedApproval="@_change.NeedApproval"
                    ApprovedByApprover="@_change.ApprovedByApprover" OnStatusChanged="OnStatusChanged" />

                <br />
                <input type="checkbox" @bind="_change.NeedApproval" disabled /> Need approval
                <br />
                <input type="checkbox" @bind="_change.ApprovedByApprover" disabled /> Approved by approver
            </div>
        }
    </div>

    <div class="right-side">
        @if (_change is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="description">
                <p>@_change.Description</p>
            </div>

            <table class="table">
            <thead>
                <tr>
                    <th>ComID</th>
                    <th>Comment</th>
                    <th>OpID</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var comment in _change.Comments)
                    {
                        <tr>
                            <td>@comment.ComID</td>
                            <td>@comment.Comment</td>
                            <td>@comment.Operator.OpID</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    [Parameter]
    public string ChanID { get; set; }
    public int ChanIDInt => int.TryParse(ChanID, out var chanId) ? chanId : -1;
    private ChangeModel _change;
    private bool _changeHasChanged = false;
    protected override async Task OnInitializedAsync()
    {
        _change = await _dbChanges.GetChange(ChanIDInt);
    }

    private async void ButtonSaveClicked()
    {
        await _dbChanges.UpdateChange(_change);
        _changeHasChanged = false;
        _logger.LogInformation($"Change with ID {_change.ChanID} was updated");
    }

    private void OnPlanningTimesChanged((DateTime StartTime, DateTime ImplementedTime) times)
    {
        _change.StartTime = times.StartTime;
        _change.ImplementedTime = times.ImplementedTime;
        _changeHasChanged = true;
    }
    private void OnCallerChanged(CallerModel caller)
    {
        _change.Caller = caller;
        _changeHasChanged = true;
    }
    private void OnCategoryChanged(SubCategoryModel subCategory)
    {
        _change.SubCategory = subCategory;
        _changeHasChanged = true;
    }
    private void OnOperatorChanged(OperatorModel operatorObj)
    {
        _change.Operator = operatorObj;
        _changeHasChanged = true;
    }
    private void OnStatusChanged(string status)
    {
        if (status == "Godkendt")
        {
            _change.ApprovedByApprover = true;
        }

        _change.Status = status;
        _changeHasChanged = true;
    }
    private void OnBriefDescriptionChanged(string briefDescription)
    {
        _change.BriefDescription = briefDescription;
        _changeHasChanged = true;
    }
}

<style>
    .content-container {
        display: flex;
        flex-direction: row;
    }

    .left-side {
        flex: 1;
    }

    .right-side {
        flex: 2;
    }

    .caller {
        border-bottom: 1px solid lightgray;
        padding: 10px;
    }

    .details {
        border-bottom: 1px solid lightgray;
        padding: 10px;
    }

    .planning {
        border-bottom: 1px solid lightgray;
        padding: 10px;
    }

    .processing {
        padding: 10px;
    }

    label {
        display: block;
        margin-bottom: 1px;
        margin-top: 10px;
    }
</style>