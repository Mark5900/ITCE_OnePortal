@page "/Changes/{ChanID}"
@using DataAccessLibrary
@rendermode InteractiveServer
@inject ICM_Changes _dbChanges
@inject ICM_SubCategories _dbSubCategories
@inject ICM_Categories _dbCategories
@inject ILogger<ChangeById> _logger

<form class="form-container d-flex justify-content-between align-items-center">
    <h1>Change ID: @ChanID</h1>
    <button class="btn btn-primary" disabled="@(!_changeHasChanged)" @onclick="ButtonSaveClicked">Save</button>
</form>

<div class="content-container">
    <div class="left-side">
    @if (_change is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {

        <div class="caller">
            <p style="font-size: 20px; font-weight: bold;">@_change.Caller.UPN</p>
            <p>@_change.Caller.SkolePrefix</p>
            <p>📱@_change.Caller.ADTelephoneNumber</p>
            <p>📱@_change.Caller.AlternativNumber1</p>
            <p>📱@_change.Caller.AlternativNumber2</p>
            <p>📧@_change.Caller.Email</p>
        </div>
        <div class="details">
            <p style="font-size: 20px; font-weight: bold;">@_change.BriefDescription</p>

            <select @bind="_change.SubCategory.CatID" @bind:event="oninput" @onchange="OnSelectionChangedCategories">
                @foreach (var category in _categories)
                {
                    <option value="@category.CatID">@category.Category</option>
                }
            </select>

            <select class="@selectClassSubCat" @bind="_change.SubCategory.SubCatID" @bind:event="oninput" @onchange="OnSelectionChangedSubCategories">
                @if (_categoryChanged)
                {
                    <option selected disabled>Vælg en underkategori</option>
                }
                @foreach (var subCategory in _subCategories)
                {
                    <option value="@subCategory.SubCatID" selected="@(_categoryChanged ? null : (_change.SubCategory.SubCatID == subCategory.SubCatID ? "selected" : null))">@subCategory.Name</option>
                }
</select>
        </div>
        <div class="planning">
            <p>@_change.StartTime</p>
            <p>@_change.ImplementedTime</p>
        </div>
            <div class="processing">
            <p>@_change.Operator.UPN</p>
            <p>@_change.Operator.OpID</p>
            <p>@_change.Status</p>
        </div>

    }
    </div>

    <div class="right-side">
        @if (_change is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="description">
                <p>@_change.Description</p>
            </div>

    <table class="table">
    <thead>
        <tr>
            <th>ComID</th>
            <th>Comment</th>
            <th>OpID</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var comment in _change.Comments)
            {
                <tr>
                    <td>@comment.ComID</td>
                    <td>@comment.Comment</td>
                    <td>@comment.Operator.OpID</td>
                </tr>
            }
        </tbody>
    </table>

            <p>Category: @_change.SubCategory.Category</p>
            <p>SubCategory: @_change.SubCategory.Name</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public string ChanID { get; set; }
    public int ChanIDInt => int.TryParse(ChanID, out var chanId) ? chanId : -1;
    private ChangeModel _change;
    private List<CategoryModel> _categories;
    private List<SubCategoryModel> _subCategories;
    private bool _categoryChanged = false;
    private string selectClassSubCat => _categoryChanged ? "red-select" : "";
    private bool _changeHasChanged = false;

    protected override async Task OnInitializedAsync()
    {
        _change = await _dbChanges.GetChange(ChanIDInt);
        _categories = await _dbCategories.GetCategories();
        _subCategories = await _dbSubCategories.GetSubCategoriesByCategory(_change.SubCategory.CatID);
    }
    void OnSelectionChangedSubCategories(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var selectedOption))
        {
            _change.SubCategory = _subCategories.FirstOrDefault(x => x.SubCatID == selectedOption);
            _categoryChanged = false;
            _changeHasChanged = true;
        }
    }

    async Task OnSelectionChangedCategories(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var selectedOption))
        {
            _subCategories  = await _dbSubCategories.GetSubCategoriesByCategory(selectedOption);
            _categoryChanged = true;
        }
    }

        private async void ButtonSaveClicked()
    {
        await _dbChanges.UpdateChange(_change);
        _changeHasChanged = false;
        _logger.LogInformation($"Change with ID {_change.ChanID} was updated");
    }
}

<style>
    .content-container {
        display: flex;
        flex-direction: row;
    }

    .left-side {
        flex: 1;
    }

    .right-side {
        flex: 2;
    }

    .red-select {
        background-color: red;
    }
</style>